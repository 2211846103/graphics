interface GraphicsAPI {
  + Initialize()
  + CreateTexture(path: string): Texture
  + CreateShader(vertex: string, fragment: string): Shader
  + CreateBuffer(type: BufferType, data: array, usage: BufferUsage): Buffer
  + CreateVertexArray(): VertexArray
  + Draw(vertexArray: VertexArray, shader: Shader, texture: Texture)
}

class OpenGLGraphicsAPI implements GraphicsAPI {
  + Initialize()
  + CreateTexture(path: string): Texture
  + CreateShader(vertex: string, fragment: string): Shader
  + CreateBuffer(data: array): Buffer
  + CreateVertexArray(): VertexArray
  + Draw(vertexArray: VertexArray, shader: Shader, texture: Texture)
}

class Renderer {
  - graphicsApi: GraphicsAPI
  + Render(scene: Scene)
}

class Scene {
  - gameObjects: array<GameObject>
  + AddGameObject(gameObject: GameObject)
  + RemoveGameObject(gameObject: GameObject)
}

class GameObject {
  - vertexArray: VertexArray
  - shader: Shader
  - texture: Texture
  + Render()
}

interface VertexArray {
  - vertexCount: int
  - indexCount: int
  - vertexBuffer: Buffer*
  - indexBuffer: Buffer*
  + bind()
  + unbind()
  + draw()
}

class OpenGLVertexArray implements VertexArray {
  - id: int
  + bind()
  + unbind()
  + draw()
}

interface Buffer {
  - data: void*
  + bind()
  + bind(type: BufferType)
  + setData(data: void*, size: int)
  + unbind()
}

class OpenGLBuffer implements Buffer {
  - id: int
  - type: GLenum
  - usage: GLenum
  + bind()
  + bind(type: BufferType)
  + setData(data: void*, size: int)
  + unbind()
}

interface Shader {
  + useShader()
}

class OpenGLShader implements Shader {
  - shaderProgram: int
  - vertex: int
  - fragment: int
  + useShader()
}

enum BufferType {
  VertexBuffer, IndexBuffer, UniformBuffer,
  TextureBuffer, ShaderStorageBuffer
}